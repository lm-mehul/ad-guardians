# -*- coding: utf-8 -*-
"""guntrainig.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12E_oUwiEQL2CTz1r7j0t166nl2HN3dkj
"""

from google.colab import drive
drive.mount('/content/drive')

# prompt: unzip file code

from zipfile import ZipFile

# Specify the path to your zip file in Google Drive
zip_file_path = '/content/drive/MyDrive/Gun detection using yolo I.v1i.yolov9.zip'  # Replace with your actual file path

# Specify the directory to extract the files to
extract_dir = '/content/drive/My Drive/extracted_files'  # Replace with desired directory

try:
    with ZipFile(zip_file_path, 'r') as zip_ref:
        zip_ref.extractall(extract_dir)
    print(f"Successfully extracted files to: {extract_dir}")
except FileNotFoundError:
    print(f"Error: File not found at {zip_file_path}")
except Exception as e:
    print(f"An error occurred: {e}")

# prompt: Write Yolo V9 TRainig code for custom dataset root_dir /content/drive/MyDrive/extracted_files

# pip install ultralytics

import os
from ultralytics import YOLO

# Set the path to your custom dataset
root_dir = '/content/drive/MyDrive/extracted_files'  # Make sure this is correct
data_yaml_path = os.path.join(root_dir, 'data.yaml') # Create or point to data.yaml
print("root path : ", root_dir)
print("data path : ", data_yaml_path)
# Load a pretrained YOLOv8n model
model = YOLO('yolov8n.pt')  # or use a different model, like 'yolov8n.yaml'
# Train the model
results = model.train(data=data_yaml_path, epochs=25, imgsz=640) # Adjust epochs and imgsz

custom_model_path = '/content/drive/MyDrive/extracted_files/custom_yolov8n.pt'
model.save(custom_model_path)  # Save the model
print(f"Model saved to {custom_model_path}")

import os
from ultralytics import YOLO

# Set the path to your custom dataset
root_dir = '/content/drive/MyDrive/extracted_files'  # Make sure this is correct
data_yaml_path = os.path.join(root_dir, 'data.yaml') # Create or point to data.yaml
print("root path : ", root_dir)
print("data path : ", data_yaml_path)
# Load a pretrained YOLOv8n model
model = YOLO('/content/drive/MyDrive/extracted_files/custom_yolov8n.pt')  # or use a different model, like 'yolov8n.yaml'
# Train the model
results = model.train(data=data_yaml_path, epochs=25, imgsz=640) # Adjust epochs and imgsz

import os
from ultralytics import YOLO

# Set the path to your custom dataset
root_dir = '/content/drive/MyDrive/extracted_files'  # Make sure this is correct
data_yaml_path = os.path.join(root_dir, 'data.yaml') # Create or point to data.yaml
print("root path : ", root_dir)
print("data path : ", data_yaml_path)
# Load a pretrained YOLOv8n model
model = YOLO('/content/drive/MyDrive/extracted_files/custom_yolov8n.pt')  # or use a different model, like 'yolov8n.yaml'
# Train the model
results = model.train(data=data_yaml_path, epochs=25, imgsz=640) # Adjust epochs and imgsz

import os
from ultralytics import YOLO

# Set the path to your custom dataset
root_dir = '/content/drive/MyDrive/extracted_files'  # Make sure this is correct
data_yaml_path = os.path.join(root_dir, 'data.yaml') # Create or point to data.yaml
print("root path : ", root_dir)
print("data path : ", data_yaml_path)
# Load a pretrained YOLOv8n model
model = YOLO('/content/drive/MyDrive/extracted_files/custom_yolov8n.pt')  # or use a different model, like 'yolov8n.yaml'
# Train the model
results = model.train(data=data_yaml_path, epochs=25, imgsz=640) # Adjust epochs and imgsz

custom_model_path = '/content/drive/MyDrive/extracted_files/custom_yolov8n.pt'
model.save(custom_model_path)  # Save the model
print(f"Model saved to {custom_model_path}")

import os
from ultralytics import YOLO

# Path to the custom trained model
custom_model_path = '/content/drive/MyDrive/extracted_files/custom_yolov8n.pt'

# Load the trained model
model = YOLO(custom_model_path)

# Path to the image or video for inference
input_path = '/content/drive/MyDrive/extracted_files/test/images/armas-10-_jpg.rf.d81bec784bdc9167d5f97cec042aeac4.jpg'  # Replace with your input file path

# Perform inference
results = model.predict(source=input_path, save=True, imgsz=640)

# Print results
print("Inference completed.")
#print("Results saved to:", results.save_dir)

import os
from ultralytics import YOLO
import matplotlib.pyplot as plt
from PIL import Image

# Path to the custom trained model
custom_model_path = '/content/drive/MyDrive/extracted_files/custom_yolov8n.pt'

# Load the trained model
model = YOLO(custom_model_path)

# Path to the image for inference
input_path = '/content/drive/MyDrive/extracted_files/test/images/armas-10-_jpg.rf.d81bec784bdc9167d5f97cec042aeac4.jpg'  # Replace with your input file path

# Perform inference
results = model.predict(source=input_path, save=True, imgsz=640)
print("Result predicted Score : ",results[0].boxes.conf)
# Print results
print("Inference completed.")
print("results : ", results)

# Access the saved directory
save_dir = model.predictor.save_dir  # Directory where the results are saved
output_image_path = os.path.join(save_dir, os.path.basename(input_path))

# Plot the image
img = Image.open(output_image_path)
plt.figure(figsize=(10, 10))
plt.imshow(img)
plt.axis('off')  # Hide axes for better visualization
plt.title("Detection Results")
plt.show()

import os
from ultralytics import YOLO
import matplotlib.pyplot as plt
from PIL import Image

# Path to the custom trained model
custom_model_path = '/content/drive/MyDrive/extracted_files/custom_yolov8n.pt'

# Load the trained model
model = YOLO(custom_model_path)

# Path to the image for inference
input_path = '/content/gun.jpg'  # Replace with your input file path

# Perform inference
results = model.predict(source=input_path, save=True, imgsz=640)

# Print predicted scores
if results and results[0].boxes:
    predicted_scores = results[0].boxes.conf.cpu().numpy()  # Convert to a list of scores
    print("Predicted Scores (Confidence):", predicted_scores*10)
else:
    print("No detections found.")

# Access the saved directory
save_dir = model.predictor.save_dir  # Directory where the results are saved
output_image_path = os.path.join(save_dir, os.path.basename(input_path))

# Plot the image
img = Image.open(output_image_path)
plt.figure(figsize=(10, 10))
plt.imshow(img)
plt.axis('off')  # Hide axes for better visualization
plt.title("Detection Results")
plt.show()